#lang racket
(define Smallset (list 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10))
(define Largeset (list 25 50 75 100))

;Function to generate the target number
(define (targetNum) (for ([i 1]) (displayln (random 101 999))))

(targetNum)


;Brute force method for calculating all possibilities of two numbers
(define a 5)
(define b 25)
(define t 125)

(+ a b)
(+ b a)
(- a b)
(- b a)
(* a b)
(* b a)
(/ a b)
(/ b a)



(define nums (list 5 25))
(define total 125)

; List of operators

(define ops (list + * - /))

; sum
(define (sum l)
  (+ (car l) (cdr l)))

; multiplication
(define (multiply l)
  (* (car l) (cdr l)))

; subtraction
(define (subtract l)
  (- (car l) (cdr l)))

; division
(define (divide l)
  (/ (car l) (cdr l)))

; revers
(define (revwcons-aux l a)
  (if (null? l)
      a
      (revwcons-aux (cdr l) (cons (car l) a))))

; Let say we are using brute-force algorithm
; then function will take list of two numbers,
; and list of operators
; but first we'll define the function for perform all operations

(define (calc_func oprs l res)
  (if (null? oprs) res
      (calc_func (cdr oprs) l (cons ((car oprs) (car l) (car (cdr l))) res))))

; This function takes as arguments:
; - list of operators eg.(+ * / -)
; - list of two numbers eg.(6 3)
; - empty list

(define l1 (list 5 25))
(calc_func ops l1 null)



